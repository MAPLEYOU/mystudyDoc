{"content":[{"key":"header","data":{"content":"一、Git初始化","level":1},"common":{"quote":false}},{"key":"list","data":{"style":"unordered","items":[{"content":"作用：初始化git仓库，想要使用git对某个项目进行管理，需要<code>git init</code>进行初始化","style":"unordered","closed":false,"items":[]}]},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__meta prompt_\"># </span><span class=\"language-bash\">在当前目录新建一个Git代码库，初始化仓库。 在当前目录下生成一个隐藏文件夹.git，不能修改.git下的任何东西</span> ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git init</span> ","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git init [project-name]</span> ","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">clone</span> [url]</span> ","<span class=\"be-code__meta prompt_\"></span>","#","echo 'yuyuyuyuyuyuyu' &gt;&gt; yuyu.md"]},"common":{"quote":false}},{"key":"header","data":{"content":"二、Git配置","level":1},"common":{"quote":false}},{"key":"paragraph","data":{"content":"Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）"},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__meta prompt_\"># </span><span class=\"language-bash\">显示当前的Git配置</span> ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git config --list</span> ","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git config -e [--global]</span> ","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git config [--global] user.name <span class=\"be-code__string\">\"[name]\"</span></span> ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git config [--global] user.email <span class=\"be-code__string\">\"[email address]\"</span></span>"]},"common":{"quote":false}},{"key":"header","data":{"content":"三、增加/删除文件","level":1},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__meta prompt_\"># </span><span class=\"language-bash\">查看文件的状态</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git status</span>","<span class=\"be-code__meta prompt_\"></span>","#","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git add <span class=\"be-code__built_in\">dir</span>/file</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git add file1 file2 ....</span>","<span class=\"be-code__meta prompt_\"></span>","#","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git add .</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git add -A</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git add --all</span>","<span class=\"be-code__meta prompt_\"></span>","#","<span class=\"be-code__meta prompt_\">#</span><span class=\"language-bash\">对于同一个文件的多出变化，可以实现分次提交</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git add -p</span>"]},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__meta prompt_\">#</span><span class=\"language-bash\">删除工作区文件，并且将这次删除放入暂存区</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">rm</span> file1 file2</span>","<span class=\"be-code__meta prompt_\"></span>","#","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">rm</span> --cached file</span>","<span class=\"be-code__meta prompt_\"></span>","#","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">mv</span> [file-original] [file-renamed]</span>"]},"common":{"quote":false}},{"key":"header","data":{"content":"四、代码提交","level":1},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__comment\">#将文件从暂存区提交到仓库</span>","<span class=\"be-code__attribute\">git</span> commit -m <span class=\"be-code__string\">\"提交说明\"</span>","git commit [file1] [file2] -m <span class=\"be-code__string\">\"提交说明\"</span>","​","<span class=\"be-code__comment\">#如果不写说明提交，会进入vi编辑器，没有写提交说明，是提交不成功的</span>","git commit <span class=\"be-code__comment\">#需要使用vi输入内容</span>","​","<span class=\"be-code__comment\">#如果是一个已经暂存过的文件，可以快速提交，如果是未追踪的文件，那么命令将不生效</span>","<span class=\"be-code__comment\">#相当于git add 和git commit -m的组合</span>","git commit -a -m <span class=\"be-code__string\">\"提交说明\"</span>","​","<span class=\"be-code__comment\">#提交时显示所有diff信息</span>","git commit -v","​","<span class=\"be-code__comment\">#使用一次新的commit 代替上一次提交</span>","<span class=\"be-code__comment\">#如果代码没有任何新变化，则用来改写上一次commit提交信息</span>","git commit --amend -m <span class=\"be-code__string\">\"提交说明\"</span>","​","<span class=\"be-code__comment\">#重做上一次commit,并包括制定文件的新变化</span>","git commit --amend [file1] [file2] ....."]},"common":{"quote":false}},{"key":"paragraph","data":{"content":"<footnote data-note=\"../../Excalidraw/git基本仓库概念.excalidraw.md\" data-title=\"\">git基本仓库概念.excalidraw</footnote>"},"common":{"quote":false}},{"key":"image","data":{"image":{"url":"https://worknote-1259320945.cos.ap-beijing.myqcloud.com/PicGo/20240331110650.png?imageSlim"},"caption":"","withCaption":true},"common":{"quote":false}},{"key":"header","data":{"content":"五、分支","level":1},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__comment\">#列出所有本地分支</span>","<span class=\"be-code__attribute\">git</span> branch","​","<span class=\"be-code__comment\">#列出所有远程分支</span>","<span class=\"be-code__attribute\">git</span> branch -r","​","<span class=\"be-code__comment\">#列出所有本地分支和远程分支</span>","<span class=\"be-code__attribute\">git</span> branch -a","​","<span class=\"be-code__comment\">#查看分支详情，包括分支指向的commitid及提交信息</span>","<span class=\"be-code__attribute\">git</span> branch -v","​","<span class=\"be-code__comment\">#新建一个分支，但依然停留在当前分支</span>","<span class=\"be-code__attribute\">git</span> branch<span class=\"be-code__meta\"> [branch-name]</span>","​","<span class=\"be-code__comment\">#重命名分支</span>","<span class=\"be-code__attribute\">git</span> branch -m &lt;branch-name&gt; newname","​","<span class=\"be-code__comment\">#新建一个分支，并切换到该分支</span>","<span class=\"be-code__attribute\">git</span> checkout -b<span class=\"be-code__meta\"> [branch]</span>","​","<span class=\"be-code__comment\">#新建一个分支，指向指定commit</span>","<span class=\"be-code__attribute\">git</span> branch<span class=\"be-code__meta\"> [branch] [commit]</span>","​","<span class=\"be-code__comment\">#新建一个分支，与指定的远程分支建立追踪关系</span>","<span class=\"be-code__attribute\">git</span> branch --track<span class=\"be-code__meta\"> [branch] [remote-branch]</span>","​","<span class=\"be-code__comment\">#切换到指定分支，并更新工作区</span>","<span class=\"be-code__attribute\">git</span> checkout<span class=\"be-code__meta\"> [branch-name]</span>","​","<span class=\"be-code__comment\">#切换到上一个分支</span>","<span class=\"be-code__attribute\">git</span> checkout -","​","<span class=\"be-code__comment\">#建立追踪关系，在现有分支与指定的远程分支之间</span>","<span class=\"be-code__attribute\">git</span> branch --set-upstream<span class=\"be-code__meta\"> [branch] [remote-branch]</span>","​","<span class=\"be-code__comment\">#合并其他分支内容到当前分支</span>","<span class=\"be-code__attribute\">git</span> merge<span class=\"be-code__meta\"> [branch]</span>","​","<span class=\"be-code__comment\">#选择一个commit,合并进当前分支</span>","<span class=\"be-code__attribute\">git</span> cherry-pick<span class=\"be-code__meta\"> [commit]</span>","​","<span class=\"be-code__comment\">#删除分支</span>","<span class=\"be-code__attribute\">git</span> branch -d<span class=\"be-code__meta\"> [branch-name] #删除一个干净的分支(即相对当前分支而言该分支没有新的提交记录)</span>","git branch -D [branch-name] #强制删除一个分支，该分支有没有合并到当前分支的提交记录 ","​","#删除远程分支","git push origin --delete [branch-name]","<span class=\"be-code__attribute\">git</span> branch -dr<span class=\"be-code__meta\"> [remote/branch]</span>"]},"common":{"quote":false}},{"key":"header","data":{"content":"<strong>分支恢复：</strong>","level":2},"common":{"quote":false}},{"key":"paragraph","data":{"content":"<strong>思路</strong>：对于已经有提交记录的分支删除后，实际上只是删除指针，commit记录还保留，如果想恢复，需要使用<code>git reflog</code>查找该分支指向的commitId，然后根据commitId创建新的分支 <code>git branch &lt;branch_name&gt; &lt;commitId&gt;</code> #根据指定commit创建新分支"},"common":{"quote":false}},{"key":"header","data":{"content":"<strong>分支合并细节</strong>","level":2},"common":{"quote":false}},{"key":"paragraph","data":{"content":"如果两个分支没有产生分叉情况，那么会进行快速合并，即fast-forward方式，它并不会产生新的commitId，只是改变了指针的指向，产生分叉合并可能会有冲突情况。<code>git merge --no-ff -m \"msg\" &lt;branch_name&gt;</code> #合并分支时禁用Fast forward模式 我们知道如果使用<code>fast-forward</code>方式进行分支合并，只是简单改变了分支指针，而不会产生新的<code>commit</code>记录。 为了保证合并数据的完整性，我们也可以在合并时指定不使用<code>fast-forward</code>方式，使用 <code>--no-ff</code> 选项。这样，在<code>merge</code>时就会生成一个新的commit，从日志上就可以看到分支合并记录了。"},"common":{"quote":false}},{"key":"header","data":{"content":"分支暂存","level":2},"common":{"quote":false}},{"key":"paragraph","data":{"content":"<code>git stash</code> #将工作暂存 \n<code>git stash list</code> #列出所有的暂存状态 \n从暂存区之中进行恢复，有两种处理方式： \n1.先恢复，而后再删除暂存 \n<code>git stash apply</code> <code>git stash drop</code> 2.恢复的同时也将stash内容删除 \n<code>git stash pop</code> 当我们在分支上进行代码开发时，有可能会接到突发需求，而当前的代码尚未完成，所以还不能直接提交。 为了解决这样的问题，git就提供了分支暂存的机制，可以将开发一半的分支进行保存，在适当的时候进行代码恢复。"},"common":{"quote":false}},{"key":"header","data":{"content":"六、标签","level":1},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__comment\"># 列出所有tag</span>","<span class=\"be-code__variable\">$ </span>git tag","​","<span class=\"be-code__comment\"># 新建一个tag在当前commit</span>","<span class=\"be-code__variable\">$ </span>git tag [tag]","​","<span class=\"be-code__comment\"># 新建一个tag在指定commit</span>","<span class=\"be-code__variable\">$ </span>git tag [tag] [commit]","​","<span class=\"be-code__comment\"># 删除本地tag</span>","<span class=\"be-code__variable\">$ </span>git tag -d [tag]","​","<span class=\"be-code__comment\"># 删除远程tag</span>","<span class=\"be-code__variable\">$ </span>git push origin <span class=\"be-code__symbol\">:refs/tags/</span>[tagName]","​","<span class=\"be-code__comment\"># 查看tag信息</span>","<span class=\"be-code__variable\">$ </span>git show [tag]","​","<span class=\"be-code__comment\"># 提交指定tag</span>","<span class=\"be-code__variable\">$ </span>git push [remote] [tag]","​","<span class=\"be-code__comment\"># 提交所有tag</span>","<span class=\"be-code__variable\">$ </span>git push [remote] --tags","​","<span class=\"be-code__comment\"># 新建一个分支，指向某个tag</span>","<span class=\"be-code__variable\">$ </span>git checkout -b [branch] [tag]"]},"common":{"quote":false}},{"key":"header","data":{"content":"七、查看信息","level":1},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__meta prompt_\"># </span><span class=\"language-bash\">显示有变更的文件</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git status</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">log</span></span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">log</span> --<span class=\"be-code__built_in\">stat</span></span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">log</span> -S [keyword]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">log</span> [tag] HEAD --pretty=format:%s</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">log</span> [tag] HEAD --grep feature</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">log</span> --follow [file]</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git whatchanged [file]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">log</span> -p [file]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"be-code__built_in\">log</span> -5 --pretty --oneline</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git shortlog -sn</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git blame [file]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git diff</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git diff --cached [file]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git diff HEAD</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git diff [first-branch]...[second-branch]</span>","git diff c265262 de4845b // 查看两个版本之间的不同 ","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git diff --shortstat <span class=\"be-code__string\">\"@{0 day ago}\"</span></span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git show [commit]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git show --name-only [commit]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git show [commit]:[filename]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git reflog</span>"]},"common":{"quote":false}},{"key":"image","data":{"image":{"url":"https://worknote-1259320945.cos.ap-beijing.myqcloud.com/PicGo/20240402085114.png?imageSlim"},"caption":"","withCaption":true},"common":{"quote":false}},{"key":"header","data":{"content":"八、远程同步","level":1},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__meta prompt_\"># </span><span class=\"language-bash\">克隆远程仓库的代码到本地</span>","git clone [远程仓库地址]","//git克隆默认会使用远程仓库的项目名字，也可以自己指定。需要是使用以下命令：","git clone [远程仓库地址] [本地项目名]","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git fetch [remote]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git remote -v</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git remote show [remote]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git remote add [shortname] [url]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git pull [remote] [branch]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git push [remote] [branch]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git push [remote] --force</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git push [remote] --all</span>"]},"common":{"quote":false}},{"key":"paragraph","data":{"content":"<strong>注意：</strong>clone 完代码，再执行 git remote -v，会发现控制台输出"},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["origin https://github.com/user1/repository.git (fetch) ","origin https://github.com/user1/repository.git (push)"]},"common":{"quote":false}},{"key":"paragraph","data":{"content":"<code>也就是说git为你默认创建了一个指向远端代码库的origin</code>（因为你是从这个地址clone下来的）。在这里我们要联系我们经常用到的命令<code>git remote add origin 你的GitHub上的地址</code>，其实，这是手动的为你的远程仓库的地址在本地起一个别名。"},"common":{"quote":false}},{"key":"header","data":{"content":"远程仓库添加别名","level":2},"common":{"quote":false}},{"key":"paragraph","data":{"content":"每次push操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名"},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__meta\">#将本地仓库和远程仓库进行关联，并给远程仓库设置一个别名 </span>","git remote <span class=\"be-code__keyword\">add</span> 仓库别名 仓库地址 ","git remote <span class=\"be-code__keyword\">add</span> autumnFish git@github.com:autumnFish/test.git ","​","<span class=\"be-code__meta\"># 删除绑定的远程仓库 </span>","autumnFish git remote <span class=\"be-code__keyword\">remove</span> autumnFish ","​","<span class=\"be-code__meta\"># 检查是否关联成功 </span>","git remote -v ","​","<span class=\"be-code__meta\"># 一般情况需要先pull一下：</span>","git pull origin master ","​","<span class=\"be-code__meta\"># push到远程库： </span>","git push -u autumnFish master ","​","<span class=\"be-code__meta\"># git clone的仓库默认有一个origin的别名</span>"]},"common":{"quote":false}},{"key":"header","data":{"content":"<strong>git push origin 和 git push -u origin master 的区别</strong>","level":2},"common":{"quote":false}},{"key":"paragraph","data":{"content":"<code>git push origin</code>上面命令表示，将当前分支推送到origin主机的对应分支。\n如果当前分支只有一个追踪分支，那么主机名都可以省略。\n如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push。"},"common":{"quote":false}},{"key":"paragraph","data":{"content":"<code>git push -u origin master</code> 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。\n&nbsp;不带任何参数的 <code>git push</code>，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。"},"common":{"quote":false}},{"key":"header","data":{"content":"git合并冲突解决","level":2},"common":{"quote":false}},{"key":"list","data":{"style":"unordered","items":[{"content":"对于同一个文件，如果在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们，在合并它们的时候就会产生合并冲突","style":"unordered","closed":false,"items":[]},{"content":"合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。","style":"unordered","closed":false,"items":[]},{"content":"可以在合并冲突后的任意时刻使用<code>git status</code>命令来查看那些因包含合并冲突而处于未合并（unmerged）状态的文件","style":"unordered","closed":false,"items":[]}]},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["$ git status ","On branch master You have unmerged paths. "," &nbsp; &nbsp;(fix conflicts <span class=\"be-code__keyword\">and</span> run <span class=\"be-code__string\">\"git commit\"</span>) ","​"," &nbsp; &nbsp;Unmerged paths: (<span class=\"be-code__keyword\">use</span> <span class=\"be-code__string\">\"git add &lt;file&gt;...\"</span> to mark resolution) ","​"," &nbsp; &nbsp; both modified: index.html ","​","<span class=\"be-code__keyword\">no</span> changes added to commit (<span class=\"be-code__keyword\">use</span> <span class=\"be-code__string\">\"git add\"</span> <span class=\"be-code__keyword\">and</span>/<span class=\"be-code__keyword\">or</span> <span class=\"be-code__string\">\"git commit -a\"</span>)"]},"common":{"quote":false}},{"key":"paragraph","data":{"content":"任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子："},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html <span class=\"be-code__tag\">&lt;<span class=\"be-code__name\">div</span> <span class=\"be-code__attr\">id</span>=<span class=\"be-code__string\">\"footer\"</span>&gt;</span>contact : email.support@github.com<span class=\"be-code__tag\">&lt;/<span class=\"be-code__name\">div</span>&gt;</span> ","======= <span class=\"be-code__tag\">&lt;<span class=\"be-code__name\">div</span> <span class=\"be-code__attr\">id</span>=<span class=\"be-code__string\">\"footer\"</span>&gt;</span> ","please contact us at support@github.com ","<span class=\"be-code__tag\">&lt;/<span class=\"be-code__name\">div</span>&gt;</span> ","&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html"]},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["这表示<span class=\"be-code__string\">`HEAD`</span>所指示的版本（也就是你的<span class=\"be-code__string\">`master`</span>分支所在的位置，因为你在运行 merge 命令的时候已经检出到了这个分支）在这个区段的上半部分（的上半部分），而<span class=\"be-code__string\">`iss53`</span>分支所指示的版本在<span class=\"be-code__string\">`的下半部分。 为了解决冲突，你必须选择使用由分割的两部分中的一个，或者你也可以自行合并这些内容。 例如，你可以通过把这段内容换成下面的样子来解决冲突：</span>"]},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["&lt;div <span class=\"be-code__built_in\">id</span>=<span class=\"be-code__string\">\"footer\"</span>&gt; ","please contact us at email.support@github.com ","&lt;/div&gt;"]},"common":{"quote":false}},{"key":"header","data":{"content":"九、撤销","level":1},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":["<span class=\"be-code__meta prompt_\"># </span><span class=\"language-bash\">恢复暂存区的指定文件到工作区</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git checkout [file]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git checkout [commit] [file]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git checkout .</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git reset [file]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git reset --hard</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git reset [commit]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git reset --hard [commit]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git reset --keep [commit]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\"># </span><span class=\"language-bash\">后者的所有变化都将被前者抵消，并且应用到当前分支</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git revert [commit]</span>","<span class=\"be-code__meta prompt_\"></span>","# ","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git stash</span>","<span class=\"be-code__meta prompt_\">$ </span><span class=\"language-bash\">git stash pop</span>"]},"common":{"quote":false}},{"key":"header","data":{"content":"十、实战","level":1},"common":{"quote":false}},{"key":"paragraph","data":{"content":"git 新建本地分支，并对应建立远程分支和推送到远程分支"},"common":{"quote":false}},{"key":"code","data":{"lang":"","lines":[" <span class=\"be-code__comment\">// 1.查看一下本地分支 </span>"," git branch; ","​"," <span class=\"be-code__comment\">// 查看本地和远程的所有分支 </span>"," git branch -a ","​"," <span class=\"be-code__comment\">// 2.新建一个本地的分支 </span>"," git checkout -b newbranch <span class=\"be-code__comment\">//这个命令是新建一个分支，并切换到该分支上去 </span>"," （git branch newbranch; git checkout newbranch）这两个命令合起来等同于上面的一个命令 ","​"," <span class=\"be-code__comment\">// 3.新建一个远程分支（同名字的远程分支） </span>"," git push origin newbranch:newbranch <span class=\"be-code__comment\">//创建了一个远程分支名字叫 newbranch，origin为关键字 </span>","​"," <span class=\"be-code__comment\">// 4.把本地的新分支，和远程的新分支关联 </span>"," git push --<span class=\"be-code__keyword\">set</span>-upstream origin newbranch "," 这时就可以在这个分支下使用 git pull 推送支远程的新分支上了"]},"common":{"quote":false}},{"key":"header","data":{"content":"参考","level":1},"common":{"quote":false}},{"key":"paragraph","data":{"content":"&lt;footnote data-note=https://<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a> data-title=\"\"&gt;常用 Git 命令清单<footnote data-note=\"https://cloud.tencent.com/developer/article/1759718\" data-title=\"\">git 命令大全</footnote>"},"common":{"quote":false}},{"key":"paragraph","data":{"content":""},"common":{}}],"typeset":"basic","layout":"web","basic":{"title":"","cover":"","summary":""}}