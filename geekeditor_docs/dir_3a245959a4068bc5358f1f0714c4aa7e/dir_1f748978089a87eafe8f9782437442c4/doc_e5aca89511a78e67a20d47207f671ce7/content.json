{"content":[{"key":"paragraph","data":{"content":"CameraService层的功能会被包装成Binder接口，然后暴露给上层，让上层去调用，实现进程间的通信。其中，这些Binder接口主要定义在/framework/av/camera/aidl/android/hardware目录中。"},"common":{"quote":false}},{"key":"table","data":{"head":[["","",""]],"body":[["文件","函数定义","作用"],["ICameraService.aidl","int getNumberOfCameras(int type);","获取可用Camera的数量"],["CameraInfo getCameraInfo(int cameraId, boolean overrideToPortrait);","获取指定CameraId的信息（逻辑camera）",""],["ICamera connect(ICameraClient client,int cameraId,String opPackageName,int clientUid, int clientPid,int targetSdkVersion,boolean overrideToPortrait,boolean forceSlowJpegMode);","通过api1连接Camera device",""],["ICameraDeviceUser connectDevice(ICameraDeviceCallbacks callbacks,String cameraId,String opPackageName,@nullable String featureId,int clientUid, int oomScoreOffset,int targetSdkVersion,boolean overrideToPortrait);","通过api2连接Camera device，要求Device HAL的版本不低于3.2",""],["CameraStatus[] addListener(ICameraServiceListener listener);","设置监听器去监听Device和Torch的状态",""],["ConcurrentCameraIdCombination[] getConcurrentCameraIds();","获取camerid所支持的stream信息。返回一个列表中",""],["boolean isConcurrentSessionConfigurationSupported(in CameraIdAndSessionConfiguration[] sessions,int targetSdkVersion);","检查特定的一组会话配置是否能够由相应的相机ID同时支持。@param sessions 要查询的相机ID和会话配置对的集合。@param targetSdkVersion 调用此函数的应用程序的目标SDK版本。@return true &nbsp;- 支持该组并发的相机ID和流组合。false - 不支持该组并发的相机ID和流组合或者该方法被调用时使用的相机ID集合不是 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;由 getConcurrentCameraIds() 返回的。",""],["void removeListener(ICameraServiceListener listener);","移除监听Device和Torch状态的监听器",""],["CameraMetadataNative getCameraCharacteristics(String cameraId, int targetSdkVersion, boolean overrideToPortrait);","获取Camera device的static metadata，hal 版本&gt;=3.2",""],["VendorTagDescriptor getCameraVendorTagDescriptor();","从Camera Module HAL获取VendorTag的描述符",""],["VendorTagDescriptorCache getCameraVendorTagCache();","获取VendorTag描述符的缓存区",""],["String getLegacyParameters(int cameraId);","获取指定CameraId的参数，用于api1",""],["boolean supportsCameraApi(String cameraId, int apiVersion);","确定是否为特定的相机ID直接支持特定的API版本。\n@param cameraId 要检查的相机ID。\n@param apiVersion 要检查的API版本。\n@return true - 如果相机ID支持指定的API版本，则返回true。\n &nbsp; &nbsp; &nbsp; &nbsp;false - 如果相机ID不支持指定的API版本，则返回false。",""],["boolean isHiddenPhysicalCamera(String cameraId);","检查Camera是不是逻辑multi-Camera的物理Camera",""],["ICameraInjectionSession injectCamera(String packageName, String internalCamId,String externalCamId, in ICameraInjectionCallback CameraInjectionCallback);","插入外部摄像头以关闭内部摄像头session",""],["void setTorchMode(String cameraId, boolean enabled, IBinder clientBinder);","对手电筒的mode进行控制。",""],["void turnOnTorchWithStrengthLevel(String cameraId, int strengthLevel, IBinder clientBinder);","更改与相机ID关联的闪光灯单元的亮度级别为strengthLevel。\n如果手电筒处于关闭状态且strengthLevel大于0，则手电筒也将被打开。\n@param cameraId 要更改亮度级别的相机ID。\n@param strengthLevel 新的闪光灯亮度级别。\n@param clientBinder 客户端的绑定器，用于与闪光灯服务进行通信。turnOnTorchWithStrengthLevel 方法的功能，它用于设置特定相机ID的闪光灯的亮度级别。如果闪光灯当前是关闭的，并且设置的亮度级别 strengthLevel 大于0，则该方法还会将闪光灯打开。",""],["int getTorchStrengthLevel(String cameraId);","获取与相机ID关联的闪光灯单元的亮度级别。\n@param cameraId 要获取其闪光灯亮度级别的相机ID。\n@return int 返回闪光灯的当前亮度级别。如果相机ID无效或没有关联的闪光灯设备，则可能返回-1或其他错误代码。",""],["oneway void notifyDisplayConfigurationChange();","通知CameraService一个系统事件，发生了显示配置更改。\n调用者需要具有 android.permission.CAMERA_SEND_SYSTEM_EVENTS 权限，只能SystemServer调用。用于在显示配置发生变化时通知相机服务。这个方法是一个单向方法（由 oneway 关键字标识），意味着调用者不会等待方法执行完毕的响应，方法执行后会立即返回。",""],["oneway void notifyDeviceStateChange(long newState);","于在相机服务中通知设备物理状态的变化。此方法是一个单向方法，即调用后会立即返回，不会等待方法执行的结果。（需要有SystemServer权限）通知相机服务设备物理状态发生了变化。只能从特权进程中调用。\nnewState 是一个位字段，由 DEVICE_STATE_* 值组合而成。有效的状态组合因设备而异。在设备启动时，相机服务将假定设备状态为 NORMAL，直到另有通知。\n调用者需要具有 android.permission.CAMERA_SEND_SYSTEM_EVENTS 权限。",""],["String reportExtensionSessionStats(in CameraExtensionSessionStats stats);","向相机服务报告特定扩展的度量指标以供记录。这应该只由 CameraExtensionSession 调用以记录扩展度量指标。",""],["CameraStatus[] addFaceListener(ICameraFaceListener listener);","方法用于添加一个监听器，该监听器可以接收客户端的相机人脸识别信息。此方法返回一个 CameraStatus 数组，它可能包含有关添加操作成功或失败的状态信息（miui）",""],["void removeFaceListener(ICameraFaceListener listener);","方法用于移除之前添加的用于接收相机人脸识别信息的监听器。参数 listener 是之前添加的 ICameraFaceListener 监听器对象。(miui)",""],["ICameraServiceListener","oneway void onStatusChanged(int status, String cameraId);","当相机的状态发生变化时，通知注册的客户端。在Camera Service listener list中添加Listener后改变Camera Device的初始状态。@param status 相机的新状态。@param cameraId 逻辑相机的ID。"],["oneway void onPhysicalCameraStatusChanged(int status, String cameraId, String physicalCameraId);","通知注册的客户端关于支持一个逻辑相机的物理相机的状态变化。@param status 物理相机的新状态。@param cameraId 逻辑相机的ID。@param physicalCameraId 物理相机的ID。",""],["oneway void onTorchStatusChanged(int status, String cameraId);","在Camera Service listener list中添加Listener后改变Torch Mode的初始状态.// The camera's torch mode has become not available to use via// setTorchMode().const int TORCH_STATUS_NOT_AVAILABLE = 0;// The camera's torch mode is off and available to be turned on via// setTorchMode().const int TORCH_STATUS_AVAILABLE_OFF = 1;// The camera's torch mode is on and available to be turned off via// setTorchMode().const int TORCH_STATUS_AVAILABLE_ON &nbsp;= 2;",""],["oneway void onTorchStrengthLevelChanged(String cameraId, int newTorchStrength);","在Camera Service listener list中添加Listener后改变TorchStrength的初始状态.",""],["oneway void onCameraAccessPrioritiesChanged();","通知已注册客户端Camera访问优先级的更改，未打开Device客户端可以重试。它是一个单向方法，用于在相机访问优先级发生变化时通知已注册的客户端。这意味着如果有客户端因为优先级问题而无法访问某个相机设备，一旦优先级发生变化，它们可以再次尝试访问相机。",""],["oneway void onCameraOpened(String cameraId, String clientPackageId);","通知注册的客户端，camera已经open。",""],["oneway void onCameraClosed(String cameraId);","通知注册的客户端，camera已经close。",""]]},"common":{"quote":false}},{"key":"paragraph","data":{"content":"下面是CameraDeviceClient定义的接口："},"common":{"quote":false}},{"key":"table","data":{"head":[["","",""]],"body":[["文件","函数定义","作用"],["ICameraDeviceUser","void disconnect();","Client断开Camera Device"],["SubmitInfo submitRequest(in CaptureRequest request, boolean streaming);","Client向Camera Device发送请求，将Request进行转换",""],["SubmitInfo submitRequestList(in CaptureRequest[] requestList, boolean streaming);","Client向Camera Device发送请求",""],["long cancelRequest(int requestId);","取消指定CameraId的重复请求，返回最后一帧，重复请求可能导致Device停止",""],["void beginConfigure();","在调用 deleteStream, createStream, 或 endConfigure 之前的任何时候都必须调用 beginConfigure。\n当设备不是空闲状态时，调用此方法无效。",""],["int[] endConfigure(int operatingMode, in CameraMetadataNative sessionParams, long startTimeMs);","会调用到Camera3Device中的configureStream进行数据流的配置",""],["boolean isSessionConfigurationSupported(in SessionConfiguration sessionConfiguration);","检查Camera Device是否支持特定的Session Configuration",""],["void deleteStream(int streamId);","删除指定Stream",""],["int createStream(in OutputConfiguration outputConfiguration);","创建stream",""],["int createInputStream(int width, int height, int format, boolean isMultiResolution);","创建一个Input Stream",""],["Surface getInputSurface();","获取用于存储InputStream的Surface",""],["CameraMetadataNative createDefaultRequest(int templateId);","从指定模板创建一个Request",""],["CameraMetadataNative getCameraInfo();","获取Camera Device的信息",""],["void waitUntilIdle();","等待所有请求处理完成",""],["long flush();","断开cameraService前的清洗工作",""],["void prepare(int streamId);","为指定Stream分配Buffer",""],["void tearDown(int streamId);","释放指定Stream的Buffer",""],["void prepare2(int maxCount, int streamId);","为指定Stream分配指定最大数量的Buffer",""],["void updateOutputConfiguration(int streamId, in OutputConfiguration outputConfiguration);","更新输出Configuration",""],["void finalizeOutputConfigurations(int streamId, in OutputConfiguration outputConfiguration);","在surface添加之前完成输出Configuration",""],["void setCameraAudioRestriction(int mode);","为这个相机设备设置音频限制模式。\n@param mode 音频限制模式的ID，如上所述。",""],["int getGlobalAudioRestriction();","获取所有相机客户端的全局音频限制模式。\n@return 当前应用的全局音频限制模式。",""],["ICameraOfflineSession switchToOffline(in ICameraDeviceCallbacks callbacks,in int[] offlineOutputIds);","离线处理的主要入口点。@param callbacks 将从离线会话接收回调的对象。@param offlineOutputIds 需要在离线会话中保留的流的ID。@return 离线会话对象。代表了离线会话，允许进行离线图像处理或其他相机操作。这里的 in 关键字是Java中的一种修饰符，用于指定参数是通过引用传递的，这意味着在方法内部对这些参数所指向的对象所做的更改将反映在方法外部。",""],["ICameraDeviceCallback","oneway void onDeviceError(int errorCode, in CaptureResultExtras resultExtras);","在连接camera device发生错误时触发"],["oneway void onDeviceIdle();","当camera device处于IDLE状态时触发",""],["oneway void onCaptureStarted(in CaptureResultExtras resultExtras, long timestamp);","这个函数回调表示camera device已经准备好，可以进行拍照",""],["oneway void onResultReceived(in CameraMetadataNative result,in CaptureResultExtras resultExtras,in PhysicalCaptureResultInfo[] physicalCaptureResultInfos);","这个函数对预览很重要，表示抓取的帧数据不断被消耗",""],["oneway void onPrepared(int streamId);","向hal层申请camera Device内存分配成功会触发",""],["oneway void onRepeatingRequestError(in long lastFrameNumber,in int repeatingRequestId);","当capture request请求失败时触发",""],["oneway void onRequestQueueEmpty();","当前camera device的非预览队列为空时触发",""]]},"common":{"quote":false}}],"typeset":"basic","layout":"web","basic":{"title":"CameraService Interface（接口定义）","cover":"","summary":""}}